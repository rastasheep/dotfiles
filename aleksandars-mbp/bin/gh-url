#!/usr/bin/env bash
#/
#/ Usage: gh-url [<path>]
#/
#/ Make a github.com URL using the current repository's remote URLs to
#/ determine location. When <path> is given, append it to the generated URL.
set -e

# Usage message
usage() {
  grep ^#/ "$0" | cut -c4-
  exit
}

if [ "$1" == "--help" -o "$1" == '-h' ]; then usage; fi

# The http URL to the git repository on github.com.
url=

params=(${1//:/ })

# Run through all remotes looking for a github repository. Bail when found.
remotes="origin $(git remote)"
for remote in $remotes;
do
  git_url="$(git config remote."$remote".url || true)"
  case "$git_url" in
    https://github.com/*)
      url="$git_url"
      break
      ;;
    git@github.com:*)
      url=${git_url//git@github.com:/https:\/\/github.com\/}
      break
      ;;
    git://github.com/*)
      url=${git_url//git:\/\/github.com\//https:\/\/github.com\/}
      break
      ;;
  esac
done

# No github.com remotes exists. Death.
if [ -z "$url" ]; then
  echo "error: no github.com git remotes found" 1>&2
  exit 1
fi

# Axe the .git suffix if there is one. Remove trailing slashes.
url="${url/%.git/}"
url="${url/%\//}"

# When given a path, append it to the url. Be smart about it,
# append the part that is inside the current git repository.
# If line number is present, add it to file url.

path=${params[0]}
line=${params[1]}

# Transform path to full path
if [[ $path == /* ]]; then
  full_path="$path"
else
  full_path="$(pwd -P)/$path"
fi

# Ignore non existing paths
if [ ! -e "$full_path" ]; then
  full_path=""
fi

branch=$(git branch | sed -n '/\* /s///p')

if [ -n "$full_path" ]; then
  gitdir=$(git rev-parse --git-dir)
  workdir=$(cd "$gitdir"/.. && pwd -P)
  path=${full_path/#$workdir\//}

  if [ -z "$line" ]
  then
    echo "$url/tree/$branch/$path"
  else
    echo "$url/tree/$branch/$path#L$line"
  fi
else
  echo "$url/tree/$branch"
fi
