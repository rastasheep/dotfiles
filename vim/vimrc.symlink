" Settings
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"""""""""""
" Plugins "
"""""""""""
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-endwise'

Plugin 'thisivan/vim-bufexplorer'
Plugin 'gregsexton/MatchTag'
Plugin 'Townk/vim-autoclose'
Plugin 'kien/ctrlp.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'airblade/vim-gitgutter'
Plugin 'renderedtext/vim-bdd'
Plugin 'mileszs/ack.vim'

Plugin 'fatih/vim-go'

call vundle#end()

filetype plugin indent on

autocmd BufWritePre * :%s/\s\+$//e

set title
set hidden

" Numbers
set number
set numberwidth=4
set ruler

exe "set path=".expand("$PATH")

syntax enable

set nomodeline
set backspace=indent,eol,start " Backspace will delete EOL chars, as well as indents
set matchpairs+=<:>            " For characters that forms pairs for using % commands, this is for HTML Tags
set shortmess=atToOI           " To avoid the 'Hit Enter' prompts caused by the file messages
set iskeyword+=_,$,@,%,#       " Keywords are use to searching and recognized with many commands
set history=1000
set undolevels=1000
set confirm
set updatetime=1500

" Encoding "
set encoding=utf-8
set termencoding=utf-8

" Instantly leave insert mode when pressing <ESC>"
" This works by disabling the mapping timeout completely in normal
" mode, and enabling it in insert mode with a very low timeout length.
augroup fastescape
	autocmd!

	set notimeout
	set ttimeout
	set timeoutlen=10

	au InsertEnter * set timeout
	au InsertLeave * set notimeout
augroup END


" Define <space> as leader
let mapleader = ' '
let g:mapleader = ' '

" Disable all bells"
set noerrorbells visualbell t_vb=

" Wild menu (Autocompletion)"
set wildmenu
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.jpeg,*.png,*.xpm,*.gif,.bundle
set wildmode=full

" Backup and Swap"
set nobackup
set nowritebackup
set noswapfile

" Search Options"
set hlsearch   " Highlight search
set incsearch  " Incremental search
set magic      " Set magic on, for regular expressions
set ignorecase " Searches are Non Case-sensitive
set smartcase

" FOLDING
set foldenable
set foldmethod=syntax
set foldlevel=100
set foldcolumn=0

" Look and Feel settings
" let base16colorspace=256
set background=dark
"colorscheme base16-default

" General UI Options"
set laststatus=2       " Always show the statusline

set showmatch          " Shows matching brackets when text indicator is over them
set scrolloff=5        " Show 5 lines of context around the cursor
set sidescrolloff=20
set lazyredraw         " The screen won't be redrawn unless actions took place
"set cursorline
set scrolljump=10
set showcmd
set ttyfast            " Improves redrawing for newer computers
set pumheight=10
set diffopt+=context:3
set nostartofline      " when moving thru the lines, the cursor will try to stay in the previous columns

" LAYOUT / TEXT FORMATTING
" Formatting Options
set wrap	" Soft Wrap in all files, while hard wrap can be allow by filetype
set linebreak " It maintains the whole words when wrapping

" Indentation"
set autoindent
set cindent
set smartindent

" Tab Options"
set shiftwidth=2
set tabstop=2
set expandtab

" MAPPINGS

" General
	" Clear search highlighting
  nnoremap <silent><leader>c :nohlsearch<CR>

  " Start BufExplorer
  nnoremap <silent><leader>l :BufExplorer<CR>
  nnoremap <silent><leader>s :A<CR>
  nnoremap <silent><leader>v :AV<CR>
  nnoremap <silent><leader>\ :vs<CR>
  nnoremap <silent><leader>- :split<CR>
  nnoremap <silent><leader>1 :e ~/.vimrc<CR>

  nnoremap <silent><leader>r :!rspec %<CR>
  nnoremap <silent><leader>w :wa<CR>
  command W w
  command Q q
  command Wq wq
  command E Explore
  command Pp %!python -m json.tool

  " Paste
  let paste_mode = 0 " 0 = normal, 1 = paste

  func! Paste_on_off()
    if g:paste_mode == 0
      set paste
      let g:paste_mode = 1
    else
      set nopaste
      let g:paste_mode = 0
    endif
    return
  endfunc

  " Paste Mode <F3>
  nnoremap <silent> <F3> :call Paste_on_off()<CR>
  set pastetoggle=<F3>

	" Indent visual selected code without unselecting
	" As seen in vimcasts.org
	vmap > >gv
	vmap < <gv
	vmap = =gv

  " Clear vertical split background
  hi clear VertSplit

" 3RD-PARTY PLUGINS SETTINGS

  " Buffer Explorer
  let g:bufExplorerDefaultHelp=0       " Do not show default help.
  let g:bufExplorerShowRelativePath=1  " Show relative paths.

  " Command-T
  let g:CommandTMaxHeight=5
  let g:bufExplorerShowRelativePath=1

  set wildignore+=vendor/**

  " Vim Git Gutter
  highlight SignColumn ctermbg=none
  let g:gitgutter_signs = 1            " Activate gutter signs

  " Ack tricks
  " Seen at https://github.com/jeremyckahn
  nmap <leader>a :Ack ""<Left>
  nmap <leader>A :Ack <C-r><C-w><CR>

  " Use ctrlp.vim as Command-T
  let g:ctrlp_map = '<leader>t'
  let g:ctrlp_buffer_func = {'enter': 'Ctrlp_enter','exit':  'Ctrlp_exit' }
  let g:ctrlp_custom_ignore = 'vendor/bundle$'

  func! Ctrlp_enter()
    set laststatus=0
  endfunc

  func! Ctrlp_exit()
    set laststatus=2
  endfunc


set statusline =%#identifier#
set statusline+=%f   "tail of the filename
set statusline+=%M

function! GitHub_open(lines)
  let executable = "gh-url"
  let cmd = executable . " ". expand('%:p') "

  if a:lines == "true"
    let cmd = cmd . ":" . line(".")
  endif

  echom system(cmd)
endfunc

command Ghl call GitHub_open("true")
command Gh call GitHub_open("false")

" Spell stuff
autocmd Filetype gitcommit setlocal spell textwidth=72

autocmd BufRead,BufNewFile *.md setlocal spell textwidth=80 colorcolumn=+1
autocmd BufRead,BufNewFile *.md.erb setlocal spell textwidth=80 colorcolumn=+1
autocmd BufRead,BufNewFile *.feature setlocal spell

" Vim-go stuff
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>c <Plug>(go-coverage)

function! RubocopFormat()
  " save cursor position, folds and many other things
  mkview!

  " Write current unsaved buffer to a temp file
  let l:tmpname = tempname()
  call writefile(getline(1, '$'), l:tmpname)

  " construct and execute command
  let cmd = 'bundle exec rubocop --auto-correct -c .rubocop.yml ' .  l:tmpname
  let out = system(cmd)

  " Replace current file with temp file, then reload buffer
  let old_fileformat = &fileformat
  call rename(l:tmpname, expand('%'))
  silent edit!
  let &fileformat = old_fileformat
  let &syntax = &syntax

  " restore our cursor/windows positions, folds, etc..
  silent! loadview
endfunction

autocmd BufWritePre *.rb call RubocopFormat()
