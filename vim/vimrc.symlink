" Settings
set nocompatible " not compatible with vi
filetype off

  " polyglot
  " use custom syntax for TS
  let g:polyglot_disabled = ['typescript']

" Plugins
call plug#begin('~/.vim/plugged')

" utilities
Plug 'tpope/vim-fugitive' " amazing git wrapper for vim
Plug 'tpope/vim-surround' " mappings to manage surroundings in pairs, such as quotes, parens..
Plug 'w0rp/ale' " asynchronous lint engine
Plug '/usr/local/opt/fzf' " fzf base plugin, installed by homebrew
Plug 'junegunn/fzf.vim' " fuzzy completion tool, used for searcing files, inside files, buffers, commits
Plug 'Townk/vim-autoclose'
Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'

" language-specific plugins
Plug 'sheerun/vim-polyglot'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'gregsexton/MatchTag', { 'for': 'html' } " match tags in html, similar to paren support

call plug#end()

filetype plugin indent on

autocmd BufWritePre * :%s/\s\+$//e

set title
set hidden

" Numbers
set number
set numberwidth=4
set ruler

exe "set path=".expand("$PATH")

syntax enable
syntax on

set nomodeline
set backspace=indent,eol,start " Backspace will delete EOL chars, as well as indents
set matchpairs+=<:>            " For characters that forms pairs for using % commands, this is for HTML Tags
set shortmess=atToOI           " To avoid the 'Hit Enter' prompts caused by the file messages
set iskeyword+=_,$,@,%,#       " Keywords are use to searching and recognized with many commands
set history=1000
set undolevels=1000
set confirm
set updatetime=1500

" Encoding "
set encoding=utf-8
set termencoding=utf-8

" Instantly leave insert mode when pressing <ESC>"
" This works by disabling the mapping timeout completely in normal
" mode, and enabling it in insert mode with a very low timeout length.
augroup fastescape
	autocmd!

	set notimeout
	set ttimeout
	set timeoutlen=10

	au InsertEnter * set timeout
	au InsertLeave * set notimeout
augroup END


" Define <space> as leader
let mapleader = ' '
let g:mapleader = ' '

" Disable all bells"
set noerrorbells visualbell t_vb=

" Wild menu (Autocompletion)"
set wildmenu
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.jpeg,*.png,*.xpm,*.gif,.bundle
set wildmode=full
set completeopt+=longest,menuone
set omnifunc=syntaxcomplete#Complete

" Backup and Swap
set nobackup
set nowritebackup
set noswapfile

" Search Options
set hlsearch   " Highlight search
set incsearch  " Incremental search
set magic      " Set magic on, for regular expressions
set ignorecase " Searches are Non Case-sensitive
set smartcase

" Live Substitution
set inccommand=split

" FOLDING
set foldenable
set foldmethod=syntax
set foldlevel=100
set foldcolumn=0

" Look and Feel settings
" let base16colorspace=256
set background=dark
"colorscheme base16-default

" General UI Options"
set laststatus=2       " Always show the statusline

set showmatch          " Shows matching brackets when text indicator is over them
set scrolloff=5        " Show 5 lines of context around the cursor
set sidescrolloff=20
set lazyredraw         " The screen won't be redrawn unless actions took place
"set cursorline
set scrolljump=10
set showcmd
set ttyfast            " Improves redrawing for newer computers
set pumheight=10
set diffopt+=context:3
set nostartofline      " when moving thru the lines, the cursor will try to stay in the previous columns

" LAYOUT / TEXT FORMATTING
" Formatting Options
set wrap	" Soft Wrap in all files, while hard wrap can be allow by filetype
set linebreak " It maintains the whole words when wrapping

" toggle invisible characters
set invlist
set list
set listchars=tab:¦\ ,trail:⋅,extends:❯,precedes:❮

" Indentation"

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
" :help smarttab
set smarttab

" Auto indent
" Copy the indentation from the previous line when starting a new line
set ai

" Smart indent
" Automatically inserts one extra level of indentation in some cases, and works for C-like files
set si

" Tab Options"
set shiftwidth=2
set tabstop=2
set expandtab

set mouse= " Disable the use of the mouse

" MAPPINGS

" General
  " Neovim termial mode
  if has('nvim')
    tnoremap <Esc> <C-\><C-n>
  endif

	" Clear search highlighting
  nnoremap <silent><leader>c :nohlsearch<CR>

  " Start BufExplorer
  nnoremap <silent><leader>\ :vs<CR>
  nnoremap <silent><leader>- :split<CR>
  nnoremap <silent><leader>1 :e ~/.vimrc<CR>
  nnoremap <silent><leader>2 :e ~/Google\ Drive/notes.md<CR>

  nnoremap <silent><leader>w :wa<CR>
  command W w
  command Q q
  command Wq wq
  command E Explore
  command Pp %!python -m json.tool

  " Paste
  let paste_mode = 0 " 0 = normal, 1 = paste

  func! Paste_on_off()
    if g:paste_mode == 0
      set paste
      let g:paste_mode = 1
    else
      set nopaste
      let g:paste_mode = 0
    endif
    return
  endfunc

  " Paste Mode <F3>
  nnoremap <silent> <F3> :call Paste_on_off()<CR>
  set pastetoggle=<F3>

  " Indent visual selected code without unselecting
  " As seen in vimcasts.org
  vmap > >gv
  vmap < <gv
  vmap = =gv

  " Clear vertical split background
  hi clear VertSplit

  " Netrw settings
  let g:netrw_liststyle=3 " thin (change to 3 for tree)
  let g:netrw_preview=1   " open previews vertically
  let g:netrw_banner=0    " no banner

  " Move visual selection
  vnoremap J :m '>+1<cr>gv=gv
  vnoremap K :m '<-2<cr>gv=gv

" 3RD-PARTY PLUGINS SETTINGS

  " Vim Git Gutter
  highlight SignColumn ctermbg=none
  let g:gitgutter_signs = 1 " Activate gutter signs

  " ALE
  let g:ale_sign_error = 'x'
  let g:ale_sign_warning = '!'
  let g:ale_linters = {
  \  'html': [],
  \  'javascript': ['eslint'],
  \}

  highlight ALEError ctermbg=darkred
  highlight ALEErrorSign ctermfg=darkred
  highlight ALEWarning ctermbg=darkyellow
  highlight ALEWarningSign ctermfg=darkyellow

  " FZF
  let $FZF_DEFAULT_COMMAND = ' (git ls-files --full-name || find . -path "*/\.*" -prune -o -type f -print -o -type l -print | sed s/^..//) 2> /dev/null'
  let g:fzf_layout = { 'down': '~10%' }

  nmap <leader>t :FZF<CR>
  nmap <leader>l :Buffers<CR>
  nnoremap <silent><leader>q :bp\|bd #<CR>

  vnoremap <leader>64e c<c-r>=system('base64', @")<cr><esc>
  vnoremap <leader>64d c<c-r>=system('base64 --decode', @")<cr><esc>

  " copy / paste
  nnoremap <leader>p "+p
  nnoremap <leader>y "+y

  " Ack tricks
  " Seen at https://github.com/jeremyckahn
  nmap <leader>a :Ack<Space>
  nmap <leader>A :Ack <C-r><C-w><CR>
  nmap <leader>s :Ack!<Space>
  nmap <leader>S :Ack! <C-r><C-w><CR>

  command! -bang -nargs=* Ack
    \ call fzf#vim#grep(
    \   'ag -S --noheading --column --color --nobreak --hidden '.shellescape(<q-args>),
    \   1,
    \   <bang>0 ? fzf#vim#with_preview({'options': '--bind ctrl-space:select-all --preview-window noborder'}, 'up:60%') : fzf#vim#with_preview({'options': '--bind ctrl-space:select-all'}, 'right:50%:hidden', '?'),
    \   <bang>0)

  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

  command! -bang Buffers
    \ call fzf#vim#buffers({'window': 'enew'}, <bang>0)

  autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>

  " Tsuquyomi
  let g:tsuquyomi_disable_default_mappings = 1
  let g:tsuquyomi_disable_quickfix = 1
  let g:tsuquyomi_completion_detail = 1
  let g:tsuquyomi_completion_preview = 0
  let g:tsuquyomi_single_quote_import = 1

set statusline =%#identifier#
set statusline+=%f   "tail of the filename
set statusline+=%M

function! GitHub_open(lines)
  let executable = "gh-url"
  let cmd = executable . " ". expand('%:p') "

  if a:lines == "true"
    let cmd = cmd . ":" . line(".")
  endif

  echom systemlist(cmd)[0]
endfunc

command Ghl call GitHub_open("true")
command Gh call GitHub_open("false")

" file type specific settings
augroup configgroup
  autocmd!
  autocmd Filetype gitcommit setlocal spell textwidth=72

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.md setlocal spell textwidth=80 colorcolumn=+1
  autocmd BufRead,BufNewFile *.md.erb setlocal spell textwidth=80 colorcolumn=+1
  autocmd BufRead,BufNewFile *.feature setlocal spell
  autocmd BufNewFile,BufRead *.svg set filetype=xml
  autocmd BufNewFile,BufRead *.es6 set filetype=javascript
  autocmd BufNewFile,BufRead .babelrc set filetype=json
  autocmd BufNewFile,BufRead .jshintrc set filetype=json
  autocmd BufNewFile,BufRead .eslintrc set filetype=json

  autocmd FileType typescript setlocal completeopt=menuone,noselect,noselect
  autocmd FileType typescript imap <C-n> <C-x><C-o>
  autocmd FileType typescript nmap <buffer> <f2> :TsuRenameSymbol<cr><c-r><c-w>
  autocmd FileType typescript nmap <buffer> <leader>d :TsuDefinition<cr>
  autocmd FileType typescript nmap <buffer> <leader>r :TsuReferences<cr>
  autocmd FileType typescript nmap <buffer> <leader>e :TsuGeterr<cr>
  " show type information automatically when the cursor stops moving
  " autocmd FileType typescript autocmd CursorHold <buffer>
  autocmd FileType typescript nmap <buffer> <leader>i :echom tsuquyomi#hint()<cr>
  autocmd FileType typescript nmap <buffer> <leader>I :TsuImport<cr>
  autocmd FileType typescript nmap <buffer> <leader>D :TsuDefinition<cr>
augroup END


function! s:list_buffers()
  redir => list
  silent ls
  redir END
  return split(list, "\n")
endfunction

function! s:delete_buffers(lines)
  execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction

command! BD call fzf#run(fzf#wrap({
  \ 'source': s:list_buffers(),
  \ 'sink*': { lines -> s:delete_buffers(lines) },
  \ 'options': '--multi --bind ctrl-space:select-all --preview-window noborder'
\ }))

let @q = "
			\GkO\<Esc>i  - name: NEWRELIC_ENABLED\<cr>"


