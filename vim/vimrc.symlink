" Settings
set nocompatible " not compatible with vi
filetype off

" Plugins
call plug#begin('~/.vim/plugged')

" utilities
Plug 'ctrlpvim/ctrlp.vim' " fuzzy file finder, mapped to <leader>t
Plug 'tpope/vim-fugitive' " amazing git wrapper for vim
Plug 'tpope/vim-surround' " mappings to manage surroundings in pairs, such as quotes, parens..
Plug 'tpope/vim-endwise' " automatically add end in ruby
Plug 'mileszs/ack.vim' " search inside files using ack
Plug 'w0rp/ale' " asynchronous lint engine

Plug 'thisivan/vim-bufexplorer'
Plug 'Townk/vim-autoclose'
Plug 'airblade/vim-gitgutter'

" language-specific plugins
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-rails'
Plug 'renderedtext/vim-bdd'
Plug 'gregsexton/MatchTag', { 'for': 'html' } " match tags in html, similar to paren support
Plug 'Quramy/tsuquyomi'
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'

Plug 'galooshi/vim-import-js'

call plug#end()

filetype plugin indent on

autocmd BufWritePre * :%s/\s\+$//e

set title
set hidden

" Numbers
set number
set numberwidth=4
set ruler

exe "set path=".expand("$PATH")

syntax enable
syntax on

set nomodeline
set backspace=indent,eol,start " Backspace will delete EOL chars, as well as indents
set matchpairs+=<:>            " For characters that forms pairs for using % commands, this is for HTML Tags
set shortmess=atToOI           " To avoid the 'Hit Enter' prompts caused by the file messages
set iskeyword+=_,$,@,%,#       " Keywords are use to searching and recognized with many commands
set history=1000
set undolevels=1000
set confirm
set updatetime=1500

" Encoding "
set encoding=utf-8
set termencoding=utf-8

" Instantly leave insert mode when pressing <ESC>"
" This works by disabling the mapping timeout completely in normal
" mode, and enabling it in insert mode with a very low timeout length.
augroup fastescape
	autocmd!

	set notimeout
	set ttimeout
	set timeoutlen=10

	au InsertEnter * set timeout
	au InsertLeave * set notimeout
augroup END


" Define <space> as leader
let mapleader = ' '
let g:mapleader = ' '

" Disable all bells"
set noerrorbells visualbell t_vb=

" Wild menu (Autocompletion)"
set wildmenu
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.jpeg,*.png,*.xpm,*.gif,.bundle
set wildmode=full
set completeopt+=longest,menuone
set omnifunc=syntaxcomplete#Complete

" Backup and Swap"
set nobackup
set nowritebackup
set noswapfile

" Search Options"
set hlsearch   " Highlight search
set incsearch  " Incremental search
set magic      " Set magic on, for regular expressions
set ignorecase " Searches are Non Case-sensitive
set smartcase

" FOLDING
set foldenable
set foldmethod=syntax
set foldlevel=100
set foldcolumn=0

" Look and Feel settings
" let base16colorspace=256
set background=dark
"colorscheme base16-default

" General UI Options"
set laststatus=2       " Always show the statusline

set showmatch          " Shows matching brackets when text indicator is over them
set scrolloff=5        " Show 5 lines of context around the cursor
set sidescrolloff=20
set lazyredraw         " The screen won't be redrawn unless actions took place
"set cursorline
set scrolljump=10
set showcmd
set ttyfast            " Improves redrawing for newer computers
set pumheight=10
set diffopt+=context:3
set nostartofline      " when moving thru the lines, the cursor will try to stay in the previous columns

" LAYOUT / TEXT FORMATTING
" Formatting Options
set wrap	" Soft Wrap in all files, while hard wrap can be allow by filetype
set linebreak " It maintains the whole words when wrapping

" Indentation"
set autoindent
set cindent
set smartindent

" Tab Options"
set shiftwidth=2
set tabstop=2
set expandtab

set mouse= " Disable the use of the mouse

" MAPPINGS

" General
  " Neovim termial mode
  if has('nvim')
    tnoremap <Esc> <C-\><C-n>
  endif

	" Clear search highlighting
  nnoremap <silent><leader>c :nohlsearch<CR>

  " Start BufExplorer
  nnoremap <silent><leader>l :BufExplorer<CR>
  nnoremap <silent><leader>s :A<CR>
  nnoremap <silent><leader>v :AV<CR>
  nnoremap <silent><leader>\ :vs<CR>
  nnoremap <silent><leader>- :split<CR>
  nnoremap <silent><leader>1 :e ~/.vimrc<CR>
  nnoremap <silent><leader>2 :e ~/Google\ Drive/notes.md<CR>

  nnoremap <silent><leader>r :!rspec %<CR>
  nnoremap <silent><leader>w :wa<CR>
  command W w
  command Q q
  command Wq wq
  command E Explore
  command Pp %!python -m json.tool

  " Paste
  let paste_mode = 0 " 0 = normal, 1 = paste

  func! Paste_on_off()
    if g:paste_mode == 0
      set paste
      let g:paste_mode = 1
    else
      set nopaste
      let g:paste_mode = 0
    endif
    return
  endfunc

  " Paste Mode <F3>
  nnoremap <silent> <F3> :call Paste_on_off()<CR>
  set pastetoggle=<F3>

	" Indent visual selected code without unselecting
	" As seen in vimcasts.org
	vmap > >gv
	vmap < <gv
	vmap = =gv

  " Clear vertical split background
  hi clear VertSplit

  " Netrw settings
  let g:netrw_liststyle=3 " thin (change to 3 for tree)
  let g:netrw_preview=1   " open previews vertically
  let g:netrw_banner=0    " no banner

" 3RD-PARTY PLUGINS SETTINGS

  " Buffer Explorer
  let g:bufExplorerDefaultHelp=0       " Do not show default help.
  let g:bufExplorerShowRelativePath=1  " Show relative paths.

  " Command-T
  let g:CommandTMaxHeight=5
  let g:bufExplorerShowRelativePath=1

  set wildignore+=vendor/**

  " Vim Git Gutter
  highlight SignColumn ctermbg=none
  let g:gitgutter_signs = 1            " Activate gutter signs

  " Ack tricks
  " Seen at https://github.com/jeremyckahn
  nmap <leader>a :Ack ""<Left>
  nmap <leader>A :Ack <C-r><C-w><CR>

  " Use ctrlp.vim as Command-T
  let g:ctrlp_working_path_mode = 0
  let g:ctrlp_map = '<leader>t'
  let g:ctrlp_buffer_func = {'enter': 'Ctrlp_enter','exit':  'Ctrlp_exit' }
  let g:ctrlp_custom_ignore = {
      \  'dir': '\v[\/](tmp|dist|bower_components|node_modules|vendor)$',
      \ }

  func! Ctrlp_enter()
    set laststatus=0
  endfunc

  func! Ctrlp_exit()
    set laststatus=2
  endfunc

  " ALE
  let g:ale_sign_error = 'x'
  let g:ale_sign_warning = '!'
  let g:ale_linters = {
  \  'html': [],
  \  'javascript': ['eslint'],
  \}

  highlight ALEError ctermbg=darkred
  highlight ALEErrorSign ctermfg=darkred
  highlight ALEWarning ctermbg=darkyellow
  highlight ALEWarningSign ctermfg=darkyellow

set statusline =%#identifier#
set statusline+=%f   "tail of the filename
set statusline+=%M

function! GitHub_open(lines)
  let executable = "gh-url"
  let cmd = executable . " ". expand('%:p') "

  if a:lines == "true"
    let cmd = cmd . ":" . line(".")
  endif

  echom system(cmd)
endfunc

command Ghl call GitHub_open("true")
command Gh call GitHub_open("false")

" file type specific settings
augroup configgroup
  autocmd!
  autocmd Filetype gitcommit setlocal spell textwidth=72

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.md setlocal spell textwidth=80 colorcolumn=+1
  autocmd BufRead,BufNewFile *.md.erb setlocal spell textwidth=80 colorcolumn=+1
  autocmd BufRead,BufNewFile *.feature setlocal spell
  autocmd BufNewFile,BufRead *.svg set filetype=xml
  autocmd BufNewFile,BufRead *.es6 set filetype=javascript
  autocmd BufNewFile,BufRead .babelrc set filetype=json
  autocmd BufNewFile,BufRead .jshintrc set filetype=json
  autocmd BufNewFile,BufRead .eslintrc set filetype=json

  autocmd FileType typescript setlocal completeopt+=menu,preview
  autocmd FileType typescript nmap <buffer> <Leader>E <Plug>(TsuquyomiRenameSymbolC)
  autocmd FileType typescript imap <C-n> <C-x><C-o>
augroup END

" tsuquyomi (typescript) settings
let g:tsuquyomi_use_dev_node_module = 2
let g:tsuquyomi_tsserver_path = 'node_modules/typescript/bin/tsserver'
let g:tsuquyomi_completion_detail = 1

